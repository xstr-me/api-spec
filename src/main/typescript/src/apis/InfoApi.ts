/* tslint:disable */
/* eslint-disable */
/**
 * XStr.me API
 * OpenAPI specification for XStr.me services.  This API provides endpoints for managing and accessing XStr.me functionality. 
 *
 * The version of the OpenAPI document: 0.0.1-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VersionResponse,
} from '../models/index';
import {
    VersionResponseFromJSON,
    VersionResponseToJSON,
} from '../models/index';

/**
 * InfoApi - interface
 * 
 * @export
 * @interface InfoApiInterface
 */
export interface InfoApiInterface {
    /**
     * Returns the current version of the API
     * @summary Get API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionResponse>>;

    /**
     * Returns the current version of the API
     * Get API version
     */
    getVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionResponse>;

}

/**
 * 
 */
export class InfoApi extends runtime.BaseAPI implements InfoApiInterface {

    /**
     * Returns the current version of the API
     * Get API version
     */
    async getVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionResponseFromJSON(jsonValue));
    }

    /**
     * Returns the current version of the API
     * Get API version
     */
    async getVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersionResponse> {
        const response = await this.getVersionRaw(initOverrides);
        return await response.value();
    }

}
