/* tslint:disable */
/* eslint-disable */
/**
 * XStr.me API
 * OpenAPI specification for XStr.me services.  This API provides endpoints for managing and accessing XStr.me functionality. 
 *
 * The version of the OpenAPI document: 0.0.1-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Error code
     * @type {string}
     * @memberof ErrorResponse
     */
    error: string;
    /**
     * Human-readable error message
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
    /**
     * Additional error details
     * @type {object}
     * @memberof ErrorResponse
     */
    details?: object;
    /**
     * Error timestamp
     * @type {Date}
     * @memberof ErrorResponse
     */
    timestamp?: Date;
}

/**
 * Check if a given object implements the ErrorResponse interface.
 */
export function instanceOfErrorResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "error" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function ErrorResponseFromJSON(json: any): ErrorResponse {
    return ErrorResponseFromJSONTyped(json, false);
}

export function ErrorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': json['error'],
        'message': json['message'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'timestamp': !exists(json, 'timestamp') ? undefined : (new Date(json['timestamp'])),
    };
}

export function ErrorResponseToJSON(value?: ErrorResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'message': value.message,
        'details': value.details,
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp.toISOString()),
    };
}

