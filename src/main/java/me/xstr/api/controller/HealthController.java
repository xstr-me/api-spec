/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package me.xstr.api.controller;

import me.xstr.api.model.ErrorResponse;
import me.xstr.api.model.HealthResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Health", description = "Health check operations")
public interface HealthController {

    default HealthControllerDelegate getDelegate() {
        return new HealthControllerDelegate() {};
    }

    /**
     * GET /health : Health check endpoint
     * Returns the health status of the API
     *
     * @return API is healthy (status code 200)
     *         or API is unhealthy (status code 503)
     */
    @Operation(
        operationId = "getHealth",
        summary = "Health check endpoint",
        description = "Returns the health status of the API",
        tags = { "Health" },
        responses = {
            @ApiResponse(responseCode = "200", description = "API is healthy", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "API is unhealthy", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/health",
        produces = { "application/json" }
    )
    
    default ResponseEntity<HealthResponse> getHealth(
        
    ) {
        return getDelegate().getHealth();
    }

}
