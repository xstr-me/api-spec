name: Continuous Integration

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]

jobs:
  validate-openapi:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: npm install
      
    - name: Validate OpenAPI spec
      run: |
        echo "Validating OpenAPI specification..."
        npx @apidevtools/swagger-parser validate api-spec.yml
        
    - name: Lint OpenAPI spec
      run: |
        echo "Linting OpenAPI specification..."
        npx @redocly/cli lint api-spec.yml
        
    - name: Upload OpenAPI validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: openapi-validation
        path: api-spec.yml

  test-java-build:
    runs-on: ubuntu-latest
    needs: validate-openapi
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Validate Maven POM
      run: mvn validate
      
    - name: Compile Java code
      run: mvn clean compile
      
    - name: Run Java tests
      run: mvn test
      
    - name: Upload Java test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: java-test-results-${{ matrix.java-version }}
        path: |
          target/surefire-reports/
          target/site/jacoco/

  test-typescript-build:
    runs-on: ubuntu-latest
    needs: validate-openapi
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Set up JDK 17 (for OpenAPI generation)
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.m2/repository
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-deps-
          
    - name: Install workspace dependencies
      run: npm install
      
    - name: Generate TypeScript client
      run: |
        echo "Generating TypeScript client from OpenAPI spec..."
        mvn generate-sources -q
          - name: Install TypeScript client dependencies
      run: |
        cd src/main/typescript
        npm install
      
    - name: Lint TypeScript code
      run: |
        echo "Linting TypeScript code..."
        cd src/main/typescript
        npm run lint
        
    - name: Compile TypeScript client
      run: |
        echo "Compiling TypeScript client..."
        cd src/main/typescript
        npm run build
        
    - name: Run TypeScript tests
      run: |
        echo "Running TypeScript tests..."
        cd src/main/typescript
        npm run test
        
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        cd src/test/typescript
        npm install
        npm run test
        
    - name: Generate test coverage
      run: |
        echo "Generating test coverage..."
        cd src/main/typescript
        npm run test:coverage
          - name: Upload TypeScript test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: typescript-test-results-${{ matrix.node-version }}
        path: |
          src/test/typescript/coverage/
          src/main/typescript/dist/

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-java-build, test-typescript-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.m2/repository
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-deps-
          
    - name: Install dependencies
      run: npm install
      
    - name: Run OWASP Dependency Check (Java)
      run: |
        echo "Running OWASP Dependency Check for Java dependencies..."
        mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=9
          - name: NPM Security Audit
      run: |
        echo "Running NPM security audit for main client..."
        cd src/main/typescript
        npm audit --audit-level=high || echo "NPM audit found high-severity issues"
        
        echo "Running NPM security audit for test utilities..."
        cd ../../../src/test/typescript
        npm audit --audit-level=high || echo "NPM audit found high-severity issues"
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          target/dependency-check-report.html
          npm-audit.json

  generate-documentation:
    runs-on: ubuntu-latest
    needs: [test-java-build, test-typescript-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.m2/repository
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-deps-
            - name: Install dependencies
      run: npm install
      
    - name: Generate TypeScript client
      run: mvn generate-sources -q
      
    - name: Install TypeScript dependencies
      run: |
        cd src/main/typescript
        npm install
      
    - name: Build TypeScript client
      run: |
        cd src/main/typescript
        npm run build
      
    - name: Generate API documentation
      run: |
        echo "Generating API documentation..."
        mkdir -p docs
        
        # Generate OpenAPI docs with Redoc
        npx @redocly/cli build-docs api-spec.yml --output docs/api-docs.html
        
        # Generate TypeScript client docs
        cd src/main/typescript
        npm run generate-docs || echo "TypeScript docs generation not available"
        
        # Copy TypeScript docs to main docs folder
        cd ../../..
        cp -r src/main/typescript/docs/* docs/ 2>/dev/null || echo "No TypeScript docs to copy"
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: docs-preview
        path: docs/
