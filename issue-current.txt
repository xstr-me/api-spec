title:	Restructure Project Architecture: Root npm Project for OpenAPI Generation
state:	OPEN
author:	guedouari
labels:	enhancement
comments:	0
assignees:	
projects:	
milestone:	
number:	45
--
# Restructure Project Architecture: Root npm Project for OpenAPI Generation

## Problem Statement

The current project architecture uses Maven as the root project manager, which creates complexity when trying to integrate modern JavaScript tooling like Prettier, Husky, ESLint, and other development tools that are better suited for npm/Node.js ecosystems.

## Proposed Solution

Restructure the project to use **npm as the root project manager** that focuses solely on:

1. **OpenAPI code generation** for all sub-projects
2. **Development tooling management** (Prettier, Husky, ESLint, etc.)
3. **Coordination between sub-projects** without owning their individual lifecycles

## Architecture Changes

### Root Project (npm-based)
- **Location**: Root directory with `package.json`
- **Primary Responsibility**: OpenAPI code generation using `@openapitools/openapi-generator-cli`
- **Secondary Responsibilities**: 
  - Prettier formatting across all projects
  - Husky git hooks for code quality
  - Coordinated tooling and linting
  - Workspace management using npm workspaces
- **No Code Ownership**: Root project should not contain business logic or compilable code

### Sub-Projects Structure
- **Maven Project**: Move to `projects/maven/` or `backend/`
  - Java Spring Boot application
  - Server-side implementation
  - Independent Maven lifecycle
- **TypeScript Client**: Move to `projects/typescript-client/` or `client/`
  - Generated TypeScript client code
  - npm publishing for client library
- **Integration Tests**: Move to `projects/integration-tests/` or `tests/`
  - Cross-project integration testing
  - API testing and validation

## Benefits

1. **Better Tooling Integration**: npm ecosystem tools work naturally
2. **Simplified CI/CD**: Each sub-project has clear, independent pipelines
3. **Code Quality**: Consistent formatting and linting across all projects
4. **Developer Experience**: Modern JavaScript tooling (Prettier, Husky, ESLint)
5. **Separation of Concerns**: Root project focuses only on coordination, not implementation

## Implementation Plan

1. Create new root `package.json` with OpenAPI generation scripts
2. Move Maven project to sub-directory
3. Configure npm workspaces for sub-project coordination
4. Set up Prettier, Husky, and other development tools at root level
5. Update CI/CD pipelines to use npm for coordination and individual tools for sub-projects
6. Update documentation and build instructions

## Impact

- **Breaking Change**: Build process will change significantly
- **Migration Required**: Existing build scripts and CI/CD will need updates
- **Improved Maintainability**: Better separation of concerns and tool integration

This restructuring aligns with modern JavaScript development practices while maintaining the independence of each sub-project's lifecycle.
│   └── src/...
└── typescript-tests/  (npm sub-project)
    ├── package.json
    └── src/...
```

### Root npm Project Responsibilities
- **OpenAPI Code Generation**: Use npm-based OpenAPI generators (like @openapitools/openapi-generator-cli)
- **Code Formatting**: Prettier configuration for all sub-projects
- **Git Hooks**: Husky for pre-commit formatting and validation
- **Workspace Management**: npm workspaces to coordinate sub-projects
- **CI/CD Orchestration**: Scripts to coordinate builds across all sub-projects
- **Development Tools**: ESLint, TypeScript configuration, and other development tools

### Benefits
1. **Better Tooling**: Access to rich npm ecosystem (Prettier, Husky, ESLint, etc.)
2. **Unified Developer Experience**: Single npm-based workflow for all operations
3. **Modern Code Quality**: Automated formatting, linting, and git hooks
4. **Simplified CI/CD**: Better integration with modern CI/CD tools
5. **Language Separation**: Clear separation between Java and TypeScript concerns
6. **Workspace Management**: npm workspaces for coordinated dependency management

## Implementation Plan

1. **Create Root npm Project**: Initialize package.json with workspace configuration
2. **Move Maven Project**: Relocate Maven project to `java-api/` subdirectory
3. **Restructure TypeScript Projects**: Move to dedicated subdirectories under workspace
4. **Configure OpenAPI Generation**: Set up npm-based OpenAPI generation workflow
5. **Add Developer Tools**: Configure Prettier, Husky, ESLint for the entire workspace
6. **Update CI/CD**: Modify pipelines to work with new npm-based orchestration
7. **Update Documentation**: Revise README and development guides

## Acceptance Criteria

- [ ] Root package.json with npm workspaces configuration
- [ ] OpenAPI code generation working via npm scripts
- [ ] Prettier configured for all file types (Java, TypeScript, JSON, YAML)
- [ ] Husky configured with pre-commit hooks for formatting
- [ ] All sub-projects building independently via npm workspace commands
- [ ] CI/CD pipelines updated to work with new structure
- [ ] Documentation updated to reflect new workflow
- [ ] Migration guide created for developers

## Breaking Changes

- **Build Commands**: New npm-based build commands instead of Maven-only
- **Project Structure**: Files relocated to new subdirectories
- **Development Workflow**: New npm-based development commands
- **CI/CD**: Pipeline changes required

